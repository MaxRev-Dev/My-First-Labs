//Сукупність програм разом з документацією на них, що використовуються для автоматизації робіт по переробці інформації на комп'ютері, називають: {
~програмним забезпеченням;
~операційною системою;
~компілятором;
~ліцензійною програмою
~САПР;
}

//Сукупність програм для керування ресурсами  комп'ютера та організації взаємозв'язку з користувачем, називають: {
~програмним забезпеченням;
~операційною системою;
~прикладною програмою;
~інструментальним засобом;
~графічно оболонкою ОС;
}

//Операційна система використовується для: {
~керування задачами;
~керування даними;
~організації інтерфейсу;
~керування пристроями;
~всіх перелічених пунктів;
}

//В склад операційної системи входять: {
~інтерфейс користувача, командний процесор, драйвери;
~графічний редактор, драйвери, модулі програмування;
~драйвери, модулі програмування, інтерфейс;
~BIOS, системи програмування, мережа;
~драйвери, модулі програмування, командний процесор;
}

//Підготовка вінчестера до початку встановлення ОС виконується програмою: {
~Fdisk;
~DiskEditor;
~Format;
~Install;
~Setup.
}

//Встановлення сучасної операційної системи здійснюється тільки: {
~в основний розділ диска;
~в будь-який розділ диска;
~в пам'ять комп'ютера;
~в стартовий сектор диска;
~в стартовий розділ диска;
}

//ОС напряму використовує : {
~оперативну пам'ять;
~постійну пам'ять;
~хешовану пам'ять;
~зовнішню пам'ять;
~всі перелічені;
}

// Командним рядком ОС Windows є: {
~C:\\Linux&gt;;
~A:/ dfffn/hjffhdj/&gt;;
~home@www_rrr$;
~всі перелічені; 
~ні один з перелічених;
}

//Структура сучасної операційної системи включає: {
~локальну частину, транспортну частину, клієнтську частину;
~серверну частину, транспортну частину, клієнтську частину;
~локальну частину, транспортну частину, мережеву частину;
~оперативну частину, серверну частину, клієнтську частину;
~оперативну частину, дискову частину, мережеву частину;
}

//Програма, яка обслуговує деякий периферійний пристрій, називається: {
~драйвером;
~модулем;
~зовнішньою;
~внутрішньою;
~системою;
}

//Сигнал,який поступає в процесор про здійснення асинхронної події, називають:  {
~перериванням;
~асинхронним;
~блокованим;
~незалежним;
~синхронним;
}

// Невеликий програмний код, що забезпечує завантаження з вінчестера однієї з відмічених спеціальним чином ОС є: {
~драйвером;
~BIOSом;
~позасистемним завантажувачем;
~сектором;
~системною програмою;
}

// Розмір адресного простору n-розрядного процесора складає : {
~2<sup>n-1</sup>;
~n<sup>2</sup>;
~2<sup>n</sup>;
~8<sup>n</sup>.
~2n;
}

//Підсистема введення-виведення включає в себе: {
~драйвери;
~файловий менеджер;
~операційну систему;
~системні області диска;
~командний процесор;
}

// Структура дискових носіїв інформації включає в себе: {
~сектори, треки;
~каталоги, сектори;
~циліндри, файли;
~файли, каталоги;
~кластери, процеси;
}


//У файлових система ОСWindows запис даних на диск здійснюється: {
~кластерами;
~секторами;
~байтами;
~файлами;
~тегами;
}

// У каталог записують: {
~файли;
~інформацію про файли та підкаталоги;
~підкаталоги;
~текст;
~файли та підкаталоги;
}

// В ОС Unix уніфікація поняття файлу означає наступне: {
~будь-які пристрої вважаються файлами;
~зовнішні пристрої не є файлами;
~спеціальні файли є каталогами  ;
~у файлів немає розширення;
~процес може бути файлом;
}

// Чотири основні секції: керування процесами, керування пам'яттю , керування даними (організація файлової системи ) та керування пристроями, складають: {
~ядро ОС Unix;
~підсистему введення-виведення;
~системні виклики ОС Unix;
~рівні захисту ОС Unix;
~секції функціонування ОС Unix;
}

// Обчислення в межах одного процесу виконуються: {
~паралельно;
~розподілено;
~послідовно;
~віртуально;
~детально;
}

// Реалізація свопінгу входить у функції : {
~диспетчерського процесу;
~користувацького процесу;
~термінального процесу;
~виконуваного процесу;
~переривання по свопінгу;
}

// Інтерпретатор команд shell виконується після: {
~запуску ОС;
~запуску графічної оболонки;
~введення коректного імені та паролю користувача;
~запуску процесів з номерами 0, 1, 2;
~введення команд користувача;
}

// Для кожного активного процесу створюється: {
~таблиця відповідності процесів;
~контекст процесу;
~хеш таблиця посилань процесу;
~таблиця файлів;
~активне переривання процесу;
}

// Апарат подій доступний: {
~системним процесам;
~процесам ОС;
~прикладним програмам;
~демонам;
~всім процесам;
}

// Вкажіть вірний варіант системних викликів для роботи з файловою системою: {
~ореn, сlose, delete, сгеаtе;
~ореn, сlose, геаd, write, сгеаtе;
~delete, remov, сгеаtе;
~ореn, сlose, геаd, write, rewrite;
~ореn, сlose, delete, remov, delete, сгеаtе;
}

// Вкажіть вірний варіант для операції P над семафором S: {
~<b>Якщо</b> (S&lt;// <b>то</b> (S:\~S+//  <b>інакше</b>  (чекати на S);
~<b>Якщо</b> (один або більше процесів чекають на S) <b>то</b>  (дозволити одному із процесів виконувати роботу)<b> інакше</b> (S:\~S+//;
~<b>Якщо</b> (S&gt;// <b>то</b> (S:\~S-//  <b>інакше</b>  (чекати на S);
~<b>Якщо</b> (один або більше процесів чекають на S) <b>то</b>  (дозволити одному із процесів виконувати роботу)<b> інакше</b> (S:\~S-//.
~<b>Якщо</b> (один або більше процесів чекають на S) <b>то</b>  (чекати на S);
}

// Процес, який знаходиться в критичній області: {
~може бути заблокований;
~не може бути заблокований;
~не може виконуватися;
~може бути призупинений;
~не може здійснювати обмін даними;
}

// Доступ до томів файлової системи здійснюється шляхом: {
~монтування до активної файлової системи;
~створення тому;
~переходу до вказаного файлу;
~відкриття файлової системи;
~підключення резервних віртуальних кластерів;
}

// <i>Послідовністю команд</i> <b>С-shell</b> називається командний рядок, що складається з команд, розділених символом: {
~;
~:
~\\
~|
~*
}

// Семафори використовуються для: {
~синхронізації двох процесів;
~обміну даними між двома процесами;
~призупинки процесу;
~обміну даними між двома процесом та пам'яттю;
~відкриття потоку команд процесору;
}

//Основною характеристикою ОС реального часу є: {
~робота в он-лайн режимі;
~наявність таймера;
~обчислення на етапі компіляції;
~діалоговий режим роботи;
~виконання команди за фіксований проміжок часу.
}

// У сучасних операційних система кожен процес виконується : {
~в реальному режимі роботи процесора
~фіксований проміжок часу
~в системній фазі
~у власному адресному просторі
~в кільці захисту 0
}

//Системний завантажувач завантажує: {
~Операційну систему
~Будь-яку програму
~Системну програму
~Тестову систему
~Програмне забезпечення
}

//Позасистемний завантажувач завантажує: {
~Системний завантажувач
~Операційну систему
~Будь-яку програму
~Системну програму
~Тестову систему
}

//BIOS це {
~Базова система введення-виведення
~Апаратне переривання
~Програмне забезпечення
~Операційна система
~Стартовий сектор
}

//Системний диск це: {
~Диск, з якого можливе завантаження ОС
~Диск, на якому знаходиться ОС
~Диск, на якому знаходиться системне програмне забезпечення
~Флешка з ОС
~CD ROM
}

//BIOS не містить: {
~драйвери нестандартних ПП
~тестові програми
~драйвери стандартних ПП
~програму початкового завантаження
~програму Setup
}

//Драйвер це: {
~програма, яка обслуговує деякий периферійний пристрій
~тестова програма
~прикладна програма
~програма початкового завантаження
~керуючий пристрій
}

// Переривання це {
~сигнал, який поступає в процесор про здійснення асинхронної події
~Апаратне переривання
~Програмне забезпечення
~Системний виклик
~Оператор мови програмування
}

//:Які події не викликають переривання: {
~Обчислення добутку двох чисел в програмах.
~події, які проходять в ПП. Процесор, який почав обмін з таким пристроєм, від імені одного процесу, може запустити інший процес. Після завершення обміну, ПП викличе переривання.
~визначені наперед події в процесах. Процес, який потребує послуг ОС, може викликати особливе переривання.
~непередбачувані події в процесах. При намаганні здійснення процесом невідомої або забороненої дії, проходить виклик переривання.
~дії оператора. Оператор, який бажає почати взаємодію з ОС, може викликати переривання.
}

//Що називають процесом? {
~деяка послідовність дій, з яких складається задача
~Будь-яку програму
~Системну програму
~Тестову систему
~Програмне забезпечення
}

//Підсистема введення-виведення {
~організує обмін інформацією з ПП
~виконує апаратне переривання
~систематизує програмне забезпечення
~здійснює системні виклики
~вводить та виводить дані в програму
}

//Підсистема введення-виведення може не включати в себе: {
~Прикладну програму
~Драйвери накопичувачів на жорстких та гнучких магнітних дисках;
~Драйвери дисплея та клавіатури;
~драйвер принтера;
~драйвери адаптерів інтерфейсів (драйвери послідовних та паралельних портів);
}

//Адресний простір це: {
~сукупність тих комірок пам'яті, які в стані адресувати процесор
~Системний завантажувач
~Адречи комірок пям'яті 
~Віртуальна адресація
~Оперативна пям'ять
}

//До функцій керування пам'яттю не належить: {
~Завантаження програми на виконання
~визначення найбільшого блока, який можна виділити програмі;
~виділення блока пам'яті заданого розміру;
~вивільнення блока пам'яті;
~зміни розміру вже виділеного блока пам'яті як в сторону збільшення, так в сторону зменшення.
}

//Стандартний розмір сектора: {
~512 байт
~1012 байт
~1000 байт
~512 Кбайт
~512 Мбайт
}

//Системна область диска містить: {
~Таблицю розміщення файлів
~1024 байти
~Вміст каталога
~Інформацію про файли
~Атрибути файлів
}

//Яке ім'я файлу не є стандартним: {
~COMP
~AUX
~CON
~LPT
~NUL
}

//Який набір символів використовують для задання шаблонів імен файлів: {
~*, ?
~?, +, -, *, /
~+, -, *, /
~?, +, _, *, /
~?, +, -, *, _
}

//<b>Шлях</b> це: {
~назва диску та послідовність імен каталогів
~відносна адреса файлу
~командний інтерпретатор
~послідовність імен файлів у каталозі
~назви підкаталогів у поточному каталозі
}

//<b>Елемент каталогу ..</b> це: {
~Позначення каталогу вищого рівня
~відносна адреса файлу
~позначення імені файлу
~позначення самого каталогу
~назва підкаталогу
}

//Файлом називають: {
~Область даних на диску 
~Базову систему введення-виведення
~Програмне забезпечення
~Елемент каталогу
~Кластери на диску
}

//
? в шаблонах імен файлів позначає: {
~Тільки  один будь-який символ 
~Будь-яку кількість символів 
~Елемент каталогу
~Кластер на диску
}

//* в шаблонах імен файлів позначає: {
~Будь-яку кількість будь-яких символів символів 
~Тільки  один будь-який символ
~Елемент даних
~Елемент каталогу
~Кластер на диску
}

//Розширення імені файлу, як правила, вказує на: {
~Тип інформації у файлі
~Область даних на диску 
~Програмне забезпечення
~Порядок сортування
~Сектор на диску
}

//Каталогом називають: {
~Спеціальний тип файлу, в якому реєструють інші файли та каталоги 
~Область даних на диску
~Системне програмне забезпечення
~Місце, де зберігаються файли, та яке має і'мя й інші атрибути
~Кластери на диску
}

//До основних концепцій побудови ОС Unix не відноситься: {
~Конгруєнтність 
~Модульність
~Мобільність
~Керування процесами
~Комунікація процесів
}

//До основних концепцій побудови ОС Unix не відноситься: {
~Утиліти 
~Модульність
~Уніфікація поняття файлу
~Командна мова
~Комунікація процесів
}

//До основних концепцій побудови ОС Unix не відноситься: {
~Ядро системи 
~Керування процесами
~Уніфікація поняття файлу
~Організація файлової системи
~Комунікація процесів
}

//До основних концепцій побудови ОС Unix не відноситься: {
~Задача "голодного філософа" 
~Керування процесами
~Інструментальний характер 
~Організація файлової системи
~Мобільність
}

//До основних концепцій побудови ОС Unix не відноситься: {
~Ядро системи 
~Керування процесами
~Уніфікація поняття файлу
~Організація файлової системи
~Комунікація процесів
}

//Яку операцію не можна виконувати над файлом: {
~переадресація 
~читання 
~запис
~знищення
~закриття
}

//Файлову систему зображують у вигляді: {
~дерева 
~незв'язаного списку
~куща списків
~файлової системи каталогів
~Комунікації пристроїв
}

//До основних компонент ОС Unix не відносять: {
~Текстовий редактор Word 
~Ядро
~утиліти
~Програми системного адміністратора
~Засоби розробки програм
}

//До основних компонент ОС Unix не відносять: {
~Каталоги із файлами
~LEX
~утиліти
~Програми обробки текстів
~Засоби розробки програм
}

//До основних компонент ОС Unix не відносять: {
~Процеси та сигнали
~YACC
~Файли- інструкції користувача
~Програми обробки текстів
~Програми організації інтерфейсу
}

//Ядро ОС Unix не містить секції: {
~Кластерів
~Керування процесами
~Керування даними
~Керування пристроями
~Керування пам'яттю
}

//Процесом називають: {
~Програму на стадії виконання
~Будь-яку послідовність операторів
~Виконуючу програму на диску
~Диспетчер задач
~Послідовність команд процесора
}


//Диспетчерський процес в ОС Unix запускається: {
~Першим
~Останнім
~Другим
~Третім
~Одночасно з іншими процесами
}

//Диспетчерський процес при запуску ОС Unix породжує наступний процес: {
~init
~format
~ttyys
~/etc
~admin
}

//Для кожного процесу створюється таблиця: {
~Контексту процесу
~Використаних даних з оперативної пям'яті
~розміщення файлів
~Створених терміналів
~Віртуальних адрес
}

//тКонтекст процесу не містить: {
~Таблицю розміщення файлів
~Номер користувача
~Посилання на системну таблицю файлів
~Номер групи користувачів
~Список реакцій на сигнали
}

//Контекст процесу не містить: {
~Таблицю розміщення файлів
~Номер користувача
~Посилання на системну таблицю файлів
~Номер групи користувачів
~Список реакцій на сигнали
}

//Основні стани процесів: {
~Готовий, блокований, призупинений
~Готовий, виконаний, призупинений
~Виконаний, блокований, призупинений
~Готовий, блокований, призупинений, виконаний
~Системний, блокований, виконаний
}

//Свопінг це: {
~Вивантаження з ОП та завантаження в ОП процесів
~Обмін даними між програмами
~Запис на диск свінгерів
~Виконання реентерабельних програм
~Системний виклик процесів
}

//Процес вважається системним: {
~З моменту системного виклику і до його завершення
~З моменту запуску операційною системою
~З моменту запуску диспетчером задач
~З моменту виконання реентерабельних програм
~З моменту запису у файл свопінгу
}

//Механізм подій доступний : {
~Системним процесам
~Процесам користувача
~Прикладним програмам
~Реентерабельним програмам
~Файловій системі
}

//Сегменти є наступних типів : {
~Процедурним, динамічним, даних
~Процедурним, динамічним, даних, адрес, фрагментів
~Процедурним, динамічним, процесорним
~Процесним, динамічним, даних
~Процедурним, процесорним
}

//Процеси виконуються у : {
~Власному віртуальному адресному просторі
~Власному реальному адресному просторі
~Власному віртуальному файловому просторі адрес
~Сумісному віртуальному адресному просторі
~Власному захищеному парольному режимі
}

//Реенерабельна програма : {
~Програма з повторним входом
~Програма з повторним виходом
~Програма з реестром
~Програма з перезаписуваним простором адрес
~Програма з рентабельним терміном використання
}

//POSIX це : {
~Міжнародний стандарт на машиннонезалежний інтерфейс комп'ютерного середовища 
~Програма з повторним виходом, виходом, 10-ти кратним виконанням
~Програма з реестром
~Стандарт на операційні системи
~Протокол міжнародного стандарту роботи в мережі
}

//Механізм подій: {
~Не дає можливості передавати дані
~Дає можливість передавати дані
~Програмувати події передавання даних
~Програма з перезаписуваним простором адрес
~Призначений для реагування користувача на події
}

//Сигнал SIGINT означає: {
~Переривання
~Невірну машинну інструкцію
~Завершення процесу
~Сигнал про інтегральне обчислення
~Реагування користувача на подію
}

//Сигнал SIGILL означає: {
~Невірну машинну інструкцію 
~Переривання-пастку
~Завершення процесу
~Сигнал про логічну операцію
~Іллегальні процеси та інструкції
}

//Сигнал SIGKILL означає: {
~Знищення процесу
~Переривання-пастку
~Кількість машинних інструкцій 
~Аварійний вихід
~Аваційний вхід
}

//Сигнал SIGALRM означає: {
~Переривання за таймером
~Переривання 
~Сигнал тривоги
~Сигнал про термінове обчислення
~Невірну машинну інструкцію 
}

//Процедурний сегмент містить: {
~Машинні інструкції та константи
~Дані 
~Процедури та функції
~Адресний простір процедур
~Статичні дані процедур
}

//Динамічний сегмент містить: {
~Дані, що не ініціалізуються при компіляції 
~Машинні інструкції та константи 
~Процедури та функції
~Адресний простір процедур
~Статичні дані процедур
}

//Сегмент даних містить: {
~Дані, що ініціалізуються при компіляції 
~Машинні інструкції та константи 
~Процедури та функції
~Адресний простір процедур
~Статичні дані файлових систем
}

//Виконуваний файл містить: {
~Процедурний сегмент, сегмент даних 
~Процедурний сегмент, динамічний сегмент, сегмент даних 
~Процедури та функції, оператори
~Адресний простір процедур, оператори
~Статичні дані, оператори
}

//Корінь дерева каталогів в ОС Unix позначають: {
~/ 
~\\ 
~C:\\
~c/
~//
}

//Суфікси файлі  в ОС Unix позначають: {
~Зміст інформації у файлі 
~Завершальна частина імені файлу 
~Потрійну адресацію
~Прив'язку до кореня
~Основні командні скрипти
}

//При записі шаблонів імен файлів в ОС Unix не використовують: {
~/ 
~* 
~?
~[
~]
}

//Виконуючі файли в ОС Unix: {
~Як правило, суфіксів не мають 
~мають суфікс ехе 
~мають суфікс сом
~мають суфікс bin
~мають два суфікси
}

//Абсолютним шляхом до файлу в ОС Unix називають: {
~Шлях, який починається з кореня 
~Шлях, який починається з активного каталогу 
~Шлях, який починається з каталогу /abs
~Послідовність імен каталогів доступу до утиліт
~Шлях, який починається з пасивного каталогу
}

//Відносним шляхом до файлу в ОС Unix називають: {
~Шлях, який починається з активного каталогу 
~Шлях, який починається з кореня
~Шлях, який починається з каталогу /abs
~Послідовність імен каталогів доступу до утиліт
~Шлях, який починається з пасивного каталогу
}

//Спеціальні файли в ОС Unix позначають: {
~Пристрої введення-виведення 
~Шлях до спеціального пристрою
~Файл із спеціальними системними функціями
~Послідовність імен каталогів кожного тому
~Процеси, процесори, стани процесів
}

//Спеціальному файлу в ОС Unix поставлено у відповідність: {
~Номер пристрою та номер типу пристрою 
~Номер спеціальної функції та номер підпрограми
~Файли із спеціальними системними функціями
~Ідентифікатори користувачів файлі
~Процеси, що використовують спеціальні файли
}

//Спеціальні файли в ОС Unix: {
~Не містять символьної інформації 
~Містять символьну інформацію
~Містять числову інформацію
~Містять інформацію про користувачів
~Містять інформацію про паролі користувачів
}


//Дозвіл на виконання каталогу в ОС Unix означає: {
~Пошук з метою формування повного імені файлу 
~Виконання всіх програм каталогу
~Виконання однієї програми, за вибором користувача
~Дозвіл на зміну атрибутів фалів у каталозі
~Запит паролю користувача цього каталогу
}

//Атрибути файлів в ОС Unix: {
~Визначають права власника, групи власників, інших осіб  
~Визначають права власника, групи власників, адміністратора
~Визначають права власника, roota, адміністратора
~Визначають права роботи в мережі з файлами
~Містять інформацію про користувачів файлів
}

//Файл в ОС Unix може: {
~Мати два однакових імені 
~Мати тільки одне імя
~Міститися на двох розділах
~Мати два однакових імені в одному каталозі
~Не мати імені
}

//Файлові системи в ОС Unix: {
~Монтуються до визначеного каталогу 
~Позначаються латинськими літерами
~Встановлюються в оперативну память
~Знаходяться в оперативній памяті
~Не монтуються до каталогів користувачів
}

//Каталог /etc  в ОС Unix містить: {
~Команди адміністратора системи 
~Інші команди користувачів
~Всі командні файли
~Прикладні встановлені програми
~Відкомпільовані програми користувачів
}

//Каталог /dev  в ОС Unix містить: {
~Каталоги спеціальних файлів, файли роботи із пристроями
~Команди адміністратора системи 
~Всі файли встановлених пристроїв та програм
~Прикладні встановлені програми
~Відкомпільовані програми користувачів
}

//Суперблок містить інформацію про: {
~Фізичну структуру файлової системи 
~Логічну структуру файлів
~Найважливіші дані про завантажувач
~Завантажувач операційних систем
~Зареєстрованих системних адміністраторів
}

//Індексний дескриптор файлу  в ОС Unix не містить інформації про: {
~Команди адміністратора системи 
~Режим доступу та тип файлу
~Дату створення файлу
~Кількість посилань на файл
~Список вказівників на блоки даних
}

//Імя файлу  в ОС Unix міститься в: {
~Елементі каталогу 
~Індексному дескрипторі файлу
~Суперблоці
~Посиланні на файл
~Кластері
}

//Обсяг індексного дескриптора файлу  в ОС Unix: {
~64 б 
~12 Кб
~512 б
~4 Мб
~1024 б
}

//Для адресації блоків файлу  в ОС Unix використовують: {
~Список з 13 елементів 
~FAT
~Список з 12 елементів
~512 бітну адресу
~Список вказівників на блоки даних 
}

//11 елемент списку адрес блоків файлу  в ОС Unix є: {
~Адресою блоку із 128 адрес блоків даних  
~Адресою блоку із 128 адрес непрямих блоків
~Списком з 12 елементів
~Адресою блоку із 128 адрес подвійних непрямих блоків
~Адресою блоку із 128 адрес потрійних непрямих блоків
}

//13 елемент списку адрес блоків файлу  в ОС Unix є: {
~Адресою блоку із 128 адрес потрійних непрямих блоків  
~Адресою блоку із 128 адрес непрямих блоків
~Списком з 12 елементів
~Адресою блоку із 128 адрес подвійних непрямих блоків
~Адресою блоку із 128 адрес блоків даних
}

//12 елемент списку адрес блоків файлу  в ОС Unix є: {
~  Адресою блоку із 128 адрес подвійних непрямих блоків
~Адресою блоку із 128 адрес непрямих блоків
~Списком з 12 елементів
~Адресою блоку із 128 адрес блоків даних 
~Адресою блоку із 128 адрес потрійних непрямих блоків
}

//Командним рядком  в ОС Unix називають: {
~Послідовність символів, що закінчується символом return
~Рядок тексту у скрипті
~Рядок тексту у bat-файлі
~Набраний текст у рядку введення 
~Адресою машинної команди
}

//Командний рядок  в ОС Unix не містить: {
~Код машинної команди
~Просту команду
~Послідовність команд
~Групу команд 
~Метасимволи
}

//Послідовністю команд в ОС Unix називають: {
~Команди, розділені символом ;
~Команди, розділені символом |
~Команди, розділені символом ..
~Команди, розділені символом &amp;&amp; 
~Команди, розділені метасимволами
}

//Конвеєр  в ОС Unix організовують за допомогою символу: {
~|
~; 
~..
~&amp;&amp; 
~: 
}

//Переадресація виведення  в ОС здійснюється за допомогою символів: {
~&gt;, &gt;&gt;
~; , -&gt;
~..
~&amp;&amp; 
~&lt;:&gt;, &lt;<--
}

//Конвеєр  в ОС Unix організовують за допомогою символу: {
~|
~; 
~..
~&amp;&amp; 
~:
}

//Внутрішні змінні в ОС Unix : {
~Встановлюють режим роботи інтерпретатора
~Встановлюють числові значення параметрів операційної системи 
~Визначаються користувачем
~Вводяться при запуску операційної системи 
~Виводять на екран параметри роботи ОС
}

//Зовнішні змінні в ОС Unix : {
~Аналогічні звичайним змінним мов програмування
~Встановлюють числові значення параметрів операційної системи 
~Вводяться при запуску операційної системи 
~Встановлюють режим роботи інтерпретатора 
~Виводять на екран параметри роботи ОС
}

//Підстановка значень змінних в ОС Unix відбувається: {
~В тому випадку, коли перед нею стоїть символ $
~В тому випадку, коли перед нею стоїть символ return 
~В тому випадку, коли вона використовується в операторі 
~В тому випадку, коли здійснюється виведення на екран 
~При зверненні до неї
}

//При описі імен файлів аргументів команд в ОС Unix можна використовувати: {
~Метасимволи
~Лише малі літери  
~Звертання до елементів каталогу 
~Назви утиліт 
~Внутрішні змінні
}

//Підстановка значень змінних в ОС Unix відбувається: {
~В тому випадку, коли перед нею стоїть символ $
~В тому випадку, коли перед нею стоїть символ return 
~В тому випадку, коли вона використовується в операторі 
~В тому випадку, коли здійснюється виведення на екран 
~При зверненні до неї
}

//
Команда для зміни каталогу в ОС Unix : {
~cd
~nam 
~dir 
~fg 
~cat
}

//
Команда для виведення тексту в ОС Unix : {
~echo
~nam 
~dir 
~fg 
~text
}

//
Команда для виходу з інтерпретатора в ОС Unix : {
~exit
~return 
~tar 
~fag 
~break
}

//
Команда для виведення таблиці процесів в ОС Unix : {
~jobs
~process 
~write 
~output 
~proctabl
}

//
Команда для завершення процесів в ОС Unix : {
~kill
~processout 
~close 
~output 
~jobs 
}

//
Команда для виконання запиту входу в ОС Unix : {
~login
~users 
~open 
~ps 
~jobs 
}

//
Команда для завершення роботи користувача в ОС Unix : {
~logout
~outusers 
~close 
~pass 
~login
}

//
Команда для підрахунку кількості рядків у файлі в ОС Unix : {
~wc
~outstroc 
~summ 
~calcstr 
~who
}

//
Команда для видачі інформації про активні процеси в ОС Unix : {
~ps
~outuproc 
~write 
~paswd 
~loginproc
}

//
Команда для отримання статусу особливого користувача (root) в ОС Unix : {
~su
~login 
~cls 
~passwd 
~admin
}

//
Команда для синхронізації запису системних буферів в ОС Unix : {
~sync
~byffers 
~tag 
~far 
~logttybyf
}

//
Команда для виведення повного імені поточного каталогу в ОС Unix : {
~pwd
~outupwd 
~passwd 
~prdir 
~ls
}

//
Команда для списку файлів в ОС Unix : {
~ls
~outudir 
~katalog 
~folder 
~print
}

//
Команда для створення каталогу в ОС Unix : {
~mkdir
~mkfolder 
~opendir 
~makefolder 
~dirgen
}

//
Команда для знищення каталогу в ОС Unix : {
~rmdir
~rmfolder 
~closedir 
~makefolder 
~mkdir
}

//
Команда для копіювання файлу в ОС Unix : {
~cp
~rmfile 
~copyfile 
~cat 
~pwd
}

//
Команда для знищення файлу в ОС Unix : {
~rm
~rmfile 
~rmdir 
~kill 
~pewd
}

//
Команда для створення архівного файлу в ОС Unix : {
~tar
~catarj 
~setarx 
~gzip 
~cdzip
}

//
Команда для створення нового імені файлу в ОС Unix : {
~ln
~lsfile 
~ls 
~create 
~tag
}

//
Команда для знищення файлу в ОС Unix : {
~rm
~rmfile 
~rmdir 
~kill 
~pewd
}

//
Зміну стану процесів викликають : {
~події
~системні процедури 
~команда tar 
~прикладні програми 
~трансферні процедури
}

//
Процес заблокований якщо : {
~Очікує появи події
~Записаний у файл свопінгу 
~Блокується іншим процесом 
~Знятий з виконання 
~Отримав повідомлення про настання події
}

//
Процес виконується якщо : {
~Йому виділений процесор
~Записаний у файл свопінгу 
~Запущений диспетчером задач 
~Очікує появи події 
~Отримав повідомлення про настання події
}

//
Список  процесів, що готові до виконання : {
~Впорядковані за пріоритетами
~Не впорядковані за пріоритетами 
~Не відсортовані 
~Очікують появи події 
~Отримають повідомлення про настання події
}

//
Список  процесів, що заблоковані : {
~Не впорядковані за пріоритетами
~Впорядковані за пріоритетами 
~Відсортовані 
~Не очікують появи події 
~Отримають повідомлення про настання події
}

//
Розблокування  процесів здійснюється : {
~В тому порядку, в якому відбуваються очікувані ними події
~Самим заблокованим процесом 
~Прикладною програмою
~Після завершення кванту часу 
~Командами користувача
}


//
Переведення в стан готовності виконуваного  процесу здійснюється : {
~Після завершення кванту часу
~Сигналом про подію в периферійному пристрої  
~Прикладною програмою
~Після завершення події 
~Командами користувача
}

//
Блок керування процесом не містить інформації про : {
~Очікувані події
~Поточний стан процесу 
~Ідентифікатор процесу
~Виділені ресурси 
~Область збереження регістрів
}

//
Над процесами не виконують наступну операцію : {
~Запис в Область збереження регістрів 
~Створення 
~Блокування
~Запуск 
~Призупинка
}

//
Створення процесу не передбачає : {
~Запис в Область збереження регістрів 
~Присвоєння імені процесу
~Визначення початкового пріоритету 
~Формування PCB 
~Виділення початкових ресурсів
}

//
Команда для створення каталогу в ОС Windows : {
~md
~mkfolder 
~opendir 
~makefolder 
~dirgen
}

//
Команда для переміщення файлів в ОС Windows : {
~move
~mkfiles 
~vol 
~path 
~dirgen
}

//
Команда для перегляду каталогу в ОС Windows : {
~dir
~ls 
~opendir 
~ln 
~dirls
}


//
Команда для форматування диска в ОС Windows : {
~Format d:
~Format /p
~Format /? 
~fdisk 
~format FAT
}

//
Команда для перегляду вмісту файлу в ОС Windows : {
~type
~man 
~cat 
~more 
~dirfile
}

//
Команда для знищення файлу в ОС Windows : {
~del
~remove 
~kill 
~more 
~filedel
}

//
Команда для очищення консолі в ОС Windows : {
~Cls 
~remove 
~del 
~more 
~Conclear
}

//
Перехід на мітку в bat- файлі в ОС Windows виконується командою: {
~goto
~label
~label goto
~for 
~exit
}

//
Вибір дій  в bat- файлі в ОС Windows виконується командою: {
~Choice
~Case
~If
~for 
~Ren
}

//
Перевірка умови  в bat- файлі в ОС Windows виконується командою: {
~If
~Case
~Choice 
~While 
~Ren
}

//
Мітка  в bat- файлі в ОС Windows починається із символа: {
~:
~Будь-якої букви
~* 
~Цифри 
~@
}

//
Віртуальна машина це: {
~модель обчислювальної машини, створеної шляхом віртуалізації обчислювальних ресурсів: процесора, оперативної пам'яті, пристроїв зберігання та вводу і виводу інформації
~Математичний опис реального компютера
~Аналог віртуальної адреси 
~Прикладне програмне забезпечення 
~Програмний опис диспетчера задач
}

//
Що не є віртуальною машиною: {
~Android
~VirtualBox
~VMware 
~IBM VM 
~Java VM
}

//
При форматуванні носіїв інформації не виконується наступна дія: {
~Розбивка вінчестера на розділи:
~Пошук дефектних секторів
~Форматування системних областей 
~Запис поверхні спеціальним кодом 
~Розбиття поверхні на сектори
}

//
В каталозі немає наступної інформації про файл (FAT): {
~Номер розділу:
~Імя файлу
~Байт атрибутів
~Дата створення файлу 
~Номер початкового кластера з даними
}

// 
Файлова система FAT32: {
~Підтримує "довгі" імена файлів:
~Не містить кореневого каталогу
~Розміщується тільки на 32-бітних носіях інформації
~Записує дату створення файлу кирилицею
~Записує файли в кореневий каталог
}

"Довгі" імена файлів не можуть містити символа(ів): {
~*
~. !
~№1
~$
~._.
}
//
Файлова система FAT32 включена в ОС: {
~Windows
~Android
~MS DOS
~Unix
~Linux
}

//
Файлова система NTFS включена в ОС: {
~Windows
~Android
~MS DOS
~Unix
~Linux
}

// 
Файлова система NTFS не містить: {
~Таблицю розділів:
~Метафайли
~Кластери
~Мета-зону
~Область даних 
}

//Найважливіший файл NTFS : {
~$MFT:
~Confyg.sys
~Kernel.exe
~swap
~GDI.exe 
}

//Призначення файлу $MFT: {
~Спільна таблиця файлів
~Підтримка Журналювання
~Кореневий каталог
~Карта вільного місця
~Завантажувальний сектор 
}

//Призначення файлу $Boot: {
~Завантажувальний сектор 
~Права користувачів
~Кореневий каталог
~Карта вільного місця
~Спільна таблиця файлів
}

//Призначення файлу $Upcase: {
~Таблиця відповідності великих і малих літер 
~Підтримка Журналювання
~Верхня сторінка Кореневого каталогу
~Карта вільного місця
~Спільна таблиця файлів та Завантажувальний сектор 
}

//Призупинений процес активізується в наступному випадку: {
~Його активізує інший процес 
~Знищиться РСВ
~Самоактивізується 
~Завершиться операція введення-виведення
~Виконається команда active proc 
}

//Призупинка процесу потрібна в наступному випадку: {
~Пікового навантаження на систему 
~Знищення процесу
~Виникнення переривання 
~Перерозподілу оперативної памяті
~Запуску системного процесу 
}

//При виникненні переривання: {
~Керування передається ОС 
~Знищується РСВ
~Файл записується на диск 
~Виконується наступний користувацький процес
~Зупиняється процесор 
}

//В ієрархію ОС не включають: {
~Файли на носіях інформації 
~Апаратуру 
~Функції ядра 
~Процеси ОС, Які підтримують процеси користувача
~Процеси користувача 
~Асинхронними процесами називають процеси:
}

//Які процеси не  існують одночасно  {
~Виконуючі процеси
~Призупинені процеси 
~Блоковані процеси
~Спільні процеси, що створюються процесом-батьком 
~Готові до виконання
}

//Взаємовиключення це: {
~Виключення одночасного доступу до розділюваних змінних 
~Виключення одночасного доступу до файлів
~Виключення одночасного доступу до принтера 
~Виключення ділення на 0
~Паралельна робота процесорів
}

//Розділювані змінні це: {
~Змінні, які одночасно можуть використовуватися декількома процесами 
~Імя яких складається з двох частин
~Змінні, поділені на 2
~Виключені змінні із процесів 
~Змінні, які ділять віртуальних адресний простір
}

//Критична область процесу: {
~Область, в якій процес використовує розділювачу змінну 
~Область, в якій процес використовує критичні операції
~Область, в якій процес виконує ділення на 0 
~Область, в якій процес здійснює системний виклик
~Область, в якій процес паралельно працює з іншими процесами
}

//Команда testandset(a, b): {
~Зчитує значення змінної b, копіює її в a, встановлює значення b в істину 
~Зчитує значення змінної b, копіює її в a, встановлює значення b в хибність
~Зчитує значення змінної b, копіює її в a 
~Обмінює значення змінних b та a
~Обнуляє значення змінних b та a
}

//Семафор це: {
~Захищена змінна, значення якої змінюється операціями P та V 
~Не захищена змінна, значення якої змінюється операціями P та V
~Тип даних процесора 
~Оператор над захищеними змінними
~Змінна, яка може приймати три значення
}

//Операція P над семафором S: {
~Якщо S&gt;0 то S\~S-1 інакше чекати на S 
~Якщо один або більше процесів чекають на S то дозволити одному із процесів продовжити роботу, інакше S\~S+1
~Якщо S&gt;\~0 то S\~S+1 інакше чекати на S 
~Якщо S&lt;0 то S\~S+1 інакше чекати на S
~Якщо процеси не чекають на S то призупинити процес, інакше S\~S-1
}

//Операція V над семафором S: {
~Якщо один або більше процесів чекають на S то дозволити одному із процесів продовжити роботу, інакше S\~S+1 
~Якщо S&gt;0 то S\~S-1 інакше чекати на S
~Якщо S&gt;\~0 то S\~S+1 інакше чекати на S 
~Якщо S&lt;0 то S\~S+1 інакше чекати на S
~Якщо процеси не чекають на S то призупинити процес, інакше S\~S-1
}

//Операції P та V: {
~неподільні 
~взаємоповязані
~доповнюють один одного 
~критичні
~гарантують виконання процесу
}

//Операції P та V: {
~Реалізуються апаратно або в ядрі ОС 
~Реалізуються в прикладних програмах
~Реалізуються в програмах користувача 
~Не реалізовані в компютерах
~Використовуються тільки в алгоритмах
}

//Зчитуючі семафори приймають значення: {
~Цілих невідємних чисел  
~Нуль та один
~На множині дійсних чисел 
~Символів латинського алфавіту
~Введених цілих чисел
}


//Двійкові семафори приймають значення: {
~Нуль або один  
~Цілих невідємних чисел
~Бінарних чисел
~Кодів символів
~Введених послідовностей нулів та одиниць
}

//Семафори використовують для : {
~Синхронізації двох процесів  
~Обміну даними
~Введення даних
~Виведення інформації
~Перевірки станів процесів
}

//Зчитуючі семафори використовують для : {
~Організації виділення однорідного ресурсу із загального пулу  
~Обміну даними
~Введення даних
~Виведення інформації
~Перевірки зчитаних символів


//Перший параметр   в bat- файлі в ОС Windows записується як: {
~ % 1 
~ % % 1 
~ % 1 % 
~ Goto % 1 
~ 1 
}
-----
